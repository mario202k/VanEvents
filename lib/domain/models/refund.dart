enum RefundReason {
  duplicate,
  fraudulent,
  requested_by_customer,
  expired_uncaptured_charge //generated by Stripe internally
}

enum RefundStatus { pending, succeeded, failed, canceled, new_demand, refused }

class Refund {
  final String id;
  final String stripeId;
  final String object;
  final int amount;
  final String balanceTransaction;
  final String charge;
  final int created;
  final String currency;
  final String paymentIntent;
  final RefundReason reason;
  final String receiptNumber;
  final String sourceTransferReversal;
  final RefundStatus status;
  final String transferReversal;

  Refund(
      {this.id,
      this.stripeId,
      this.object,
      this.amount,
      this.balanceTransaction,
      this.charge,
      this.created,
      this.currency,
      this.paymentIntent,
      this.reason,
      this.receiptNumber,
      this.sourceTransferReversal,
      this.status,
      this.transferReversal});

  factory Refund.fromMap(Map map) {
    RefundReason reason;

    switch (map['reason'] as String) {
      case 'duplicate':
        reason = RefundReason.duplicate;
        break;
      case 'fraudulent':
        reason = RefundReason.fraudulent;
        break;
      case 'requested_by_customer':
        reason = RefundReason.requested_by_customer;
        break;
      case 'expired_uncaptured_charge':
        reason = RefundReason.expired_uncaptured_charge;
        break;
    }
    RefundStatus status;
    switch (map['status'] as String) {
      case 'pending':
        status = RefundStatus.pending;
        break;
      case 'succeeded':
        status = RefundStatus.succeeded;
        break;
      case 'failed':
        status = RefundStatus.failed;
        break;
      case 'canceled':
        status = RefundStatus.canceled;
        break;
      case 'new_demand':
        status = RefundStatus.new_demand;
        break;
      case 'refused':
        status = RefundStatus.refused;
        break;
    }

    return Refund(
      id: map['id'] as String,
      object: map['object'] as String,
      amount: map['amount'] as int,
      balanceTransaction: map['balanceTransaction'] as String,
      charge: map['charge'] as String,
      created: map['created'] as int,
      currency: map['currency'] as String,
      paymentIntent: map['paymentIntent'] as String,
      reason: reason,
      receiptNumber: map['receiptNumber'] as String,
      sourceTransferReversal: map['sourceTransferReversal'] as String,
      status: status,
      transferReversal: map['transferReversal'] as String,
    );
  }

  factory Refund.fromStripeMap(Map map, String id) {
    RefundReason reason;

    switch (map['reason'] as String) {
      case 'duplicate':
        reason = RefundReason.duplicate;
        break;
      case 'fraudulent':
        reason = RefundReason.fraudulent;
        break;
      case 'requested_by_customer':
        reason = RefundReason.requested_by_customer;
        break;
      case 'expired_uncaptured_charge':
        reason = RefundReason.expired_uncaptured_charge;
        break;
    }
    RefundStatus status;
    switch (map['status'] as String) {
      case 'pending':
        status = RefundStatus.pending;
        break;
      case 'succeeded':
        status = RefundStatus.succeeded;
        break;
      case 'failed':
        status = RefundStatus.failed;
        break;
      case 'canceled':
        status = RefundStatus.canceled;
        break;
    }

    return Refund(
      id: id,
      stripeId: map['id'] as String,
      object: map['object'] as String,
      amount: map['amount'] as int,
      balanceTransaction: map['balance_transaction'] as String,
      charge: map['charge'] as String,
      created: map['created'] as int,
      currency: map['currency'] as String,
      paymentIntent: map['payment_intent'] as String,
      reason: reason,
      receiptNumber: map['receipt_number'] as String,
      sourceTransferReversal: map['source_transfer_reversal'] as String,
      status: status,
      transferReversal: map['transfer_reversal'] as String,
    );
  }

  Map<String, dynamic> toMap() {
    // ignore: unnecessary_cast
    return {
      'id': id,
      'stripeId': stripeId,
      'object': object,
      'amount': amount,
      'balanceTransaction': balanceTransaction,
      'charge': charge,
      'created': created,
      'currency': currency,
      'paymentIntent': paymentIntent,
      'reason': reason.toString().substring(reason.toString().indexOf('.') + 1),
      'receiptNumber': receiptNumber,
      'sourceTransferReversal': sourceTransferReversal,
      'status': status.toString().substring(status.toString().indexOf('.') + 1),
      'transferReversal': transferReversal,
    } as Map<String, dynamic>;
  }

  @override
  String toString() {
    return 'Refund{id: $id, stripeId: $stripeId, object: $object, amount: $amount, balanceTransaction: $balanceTransaction, charge: $charge, created: $created, currency: $currency, paymentIntent: $paymentIntent, reason: $reason, receiptNumber: $receiptNumber, sourceTransferReversal: $sourceTransferReversal, status: $status, transferReversal: $transferReversal}';
  }
}
